class t{worker;constructor(e){this.worker=new Worker(e,{type:"module"})}postMessage(e){this.worker.postMessage(e)}onMessage(e){this.worker.addEventListener("message",s=>{s.preventDefault(),e(s.data)})}onError(e){this.worker.addEventListener("error",s=>{s.preventDefault(),e(new Error(s.message))})}async asyncDispose(){this.worker.terminate()}async[Symbol.asyncDispose](){return this.asyncDispose()}static postMessageToParent(e){self.postMessage(e)}static onMessageFromParent(e){self.addEventListener("message",s=>{e(s.data)})}static onErrorFromParent(e){self.addEventListener("error",s=>{e(new Error(s.message))})}}export{t as WebWorker};
